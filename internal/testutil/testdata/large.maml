# Top-level comment about this large MAML file.
# It's used for benchmarking the parser, lexer, encoder, and decoder.
{
  # An inline comment about the structure.
  metadata: {
    version: 1.2,
    author: "Benchmark Generator",
    timestamp: "2023-10-27T10:00:00Z"
  },

  simple_values: {
    key-1: "value with \"escapes\" and unicode \u0022",
    123: 12345, # You can use numbers as keys, but they become identifiers.
    negative: -100,
    float_val: 6.626e-34,
    is_true: true,
    is_false: false,
    is_null: null
  },

  arrays: {
    simple_array: [1, "two", 3.0, true, null,], # trailing comma
    nested_array: [
      [1, 2, 3],
      ["a", "b", "c"],
      [
        { id: 1, name: "first" },
        { id: 2, name: "second" }
      ]
    ],
    array_of_objects: [
      { user: "kim", score: 100 },
      { user: "jane", score: 200, active: true },
      { user: "john", score: 150, notes: "has notes" }
    ]
  },

  multiline_strings: {
    poem: """
      The road goes ever on and on,
      Down from the door where it began.
      Now far ahead the road has gone,
      And I must follow, if I can.
    """,
    empty_multiline: """""",
    multiline_with_quotes: """
      Here are some quotes: 'single' and "double".
    """
  },

  # Deeply nested structure to test recursion depth and performance.
  nested_object: {
    level1: {
      level2: {
        level3: {
          "level4": {
            "level5": {
              value: "deep",
              another_array: [1, [2, [3, [4, [5]]]]]
            }
          }
        }
      }
    }
  },

  data_points: [
    {
      id: "dp001",
      values: [10, 20, 15, 25, 30],
      metadata: { source: "sensorA", quality: 0.95 }
    },
    {
      id: "dp002",
      values: [11, 22, 18, 28, 32],
      metadata: { source: "sensorB", quality: 0.92, error: null }
    },
    {
      id: "dp003",
      values: [9, 19, 16, 26, 31],
      metadata: { source: "sensorA", quality: 0.98, retries: 1 }
    }
  ],

  another_object: {
    key_with_hyphen: "value-1",
    key_with_underscore: "value_2",
    "string key": "this key is a string literal",
    another_string_key: "a value for another string key"
  }
}
